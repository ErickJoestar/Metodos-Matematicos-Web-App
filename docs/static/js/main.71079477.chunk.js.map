{"version":3,"sources":["firebase.js","Providers/UserProvider.js","Components/Login.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","signInWithGoogle","signInWithRedirect","createUserProfileDocument","user","aditionalData","a","userRef","doc","uid","get","exists","displayName","email","photoURL","set","console","error","mesage","getUserDocument","userDocument","UserContext","createContext","UserProvider","children","useState","setUser","useEffect","onAuthStateChanged","userAuth","erick","Provider","value","Login","className","useContext","log","onClick","signOut","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"m8BAeAA,IAASC,cAXc,CACnBC,OAAQ,0CACRC,WAAY,2CACZC,YAAa,kDACbC,UAAW,2BACXC,cAAe,uCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAKZ,IAAMC,EAAYV,IAASU,YAErBC,EAAOX,IAASW,OAEhBC,EAAW,IAAIZ,IAASW,KAAKE,mBAC7BC,EAAmB,kBAAMH,EAAKI,mBAAmBH,IAKjDI,EAAyB,uCAAG,WAAOC,EAAMC,GAAb,qBAAAC,EAAA,yDAChCF,EADgC,wDAI/BG,EAAUV,EAAUW,IAAV,gBAAuBJ,EAAKK,MAJP,SAOdF,EAAQG,MAPM,iBASvBC,OATuB,wBAUzBC,EAAiCR,EAAjCQ,YAAaC,EAAoBT,EAApBS,MAAOC,EAAaV,EAAbU,SAVK,mBAYvBP,EAAQQ,IAAR,GACFH,cACAE,WACAD,SACGR,IAhBsB,0DAoB7BW,QAAQC,MAAM,sBAAuB,KAAIC,QApBZ,iCAuB9BC,EAAgBf,EAAKK,MAvBS,0DAAH,wDA2BzBU,EAAe,uCAAG,WAAOV,GAAP,eAAAH,EAAA,yDACtBG,EADsB,yCACV,MADU,gCAGIZ,EAAUW,IAAV,gBAAuBC,IAAOC,MAHlC,cAGjBU,EAHiB,4BAIdX,OAAQW,IAJM,gCAMvBJ,QAAQC,MAAM,qBAAsB,KAAIC,QANjB,yDAAH,sD,QCnDfG,EAAcC,wBAAc,IAqB1BC,EAnBM,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EAGXC,mBAAS,IAHE,mBAG5BrB,EAH4B,KAGtBsB,EAHsB,KAanC,OARAC,qBAAU,WAMN,OAL4B7B,EAAK8B,mBAAL,+BAAAtB,EAAA,MAAwB,WAAMuB,GAAN,eAAAvB,EAAA,sEAC5BH,EAA0B0B,GADE,OAC1CC,EAD0C,OAEhDJ,EAAQI,GAFwC,2CAAxB,yDAM7B,IAEC,kBAACT,EAAYU,SAAb,CAAsBC,MAAO5B,GACxBoB,ICEES,EAfD,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACP9B,EAAO+B,qBAAWd,GAExB,OADAL,QAAQoB,IAAIhC,GACLA,EACH,yBAAK8B,UAAWA,EAAY,oBACxB,yBAAKG,QAAS,kBFWGvC,EAAKwC,WEXSJ,UAAU,mCAAkC,4CAG3E,yBAAKA,UAAWA,EAAY,oBACxB,yBAAKG,QAAS,kBAAMpC,KAAoBiC,UAAU,mCAAkC,0CACpF,yBAAKG,QAAS,kBAAMpC,KAAoBiC,UAAU,sCAAqC,2CCGxFK,EAfH,WAEV,OACE,kBAAC,EAAD,KACE,yBAAKL,UAAU,YACb,4BAAQA,UAAU,UAChB,wBAAIA,UAAU,iBAAd,iBACA,kBAAC,EAAD,CAAOA,UAAU,uBCAPM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.71079477.chunk.js","sourcesContent":["import firebase from 'firebase/app'\r\nimport 'firebase/firestore'\r\nimport 'firebase/auth'\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAZ9pVpUy4RIqoAL_SEiiZOb8Ox2MwcfKo\",\r\n    authDomain: \"tests-analisis-numericos.firebaseapp.com\",\r\n    databaseURL: \"https://tests-analisis-numericos.firebaseio.com\",\r\n    projectId: \"tests-analisis-numericos\",\r\n    storageBucket: \"tests-analisis-numericos.appspot.com\",\r\n    messagingSenderId: \"460905807473\",\r\n    appId: \"1:460905807473:web:808a15562e02dd5a2865d0\",\r\n    measurementId: \"G-BMYJNMJPXP\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const firestore = firebase.firestore();\r\n\r\nexport const auth = firebase.auth();\r\n\r\nexport const provider = new firebase.auth.GoogleAuthProvider();\r\nexport const signInWithGoogle = () => auth.signInWithRedirect(provider);\r\nexport const signOut = () => auth.signOut();\r\n\r\n\r\n\r\nexport const createUserProfileDocument = async (user, aditionalData) => {\r\n    if (!user) return;\r\n\r\n    //Get a reference to the place in the database where a user profile might be\r\n    const userRef = firestore.doc(`users/${user.uid}`);\r\n\r\n    // Go and fetch the documentfrom that location \r\n    const snapshot = await userRef.get();\r\n\r\n    if (!snapshot.exists) {\r\n        const { displayName, email, photoURL } = user;\r\n        try {\r\n            await userRef.set({\r\n                displayName,\r\n                photoURL,\r\n                email,\r\n                ...aditionalData\r\n            })\r\n\r\n        } catch (err) {\r\n            console.error('Error creating user', err.mesage);\r\n        }\r\n    }\r\n    return getUserDocument(user.uid)\r\n}\r\n\r\n\r\nexport const getUserDocument = async (uid) => {\r\n    if (!uid) return null;\r\n    try {\r\n        const userDocument = await firestore.doc(`users/${uid}`).get();\r\n        return { uid, ...userDocument };\r\n    } catch (err) {\r\n        console.error('Error feching user', err.mesage);\r\n    }\r\n}","import React, { createContext, useEffect, useState } from 'react';\r\nimport { auth, createUserProfileDocument } from '../firebase';\r\n\r\nexport const UserContext = createContext({});\r\n\r\nconst UserProvider = ({ children }) => {\r\n\r\n\r\n    const [user, setUser] = useState({})\r\n\r\n    useEffect(() => {\r\n        const unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {\r\n            const erick = await createUserProfileDocument(userAuth);\r\n            setUser(erick);\r\n\r\n        })\r\n        return unsubscribeFromAuth;\r\n    }, []);\r\n    return (\r\n        <UserContext.Provider value={user}>\r\n            {children}\r\n        </UserContext.Provider>\r\n    )\r\n}\r\nexport default UserProvider","import React, { useContext } from 'react';\r\nimport '../Styles/Buttons.css'\r\nimport '../Styles/Login.css'\r\nimport { signInWithGoogle, signOut } from '../firebase'\r\n\r\nimport { UserContext } from '../Providers/UserProvider';\r\n\r\nconst Login = ({ className }) => {\r\n    const user = useContext(UserContext);\r\n    console.log(user);\r\n    return user ? (\r\n        <div className={className + \" login_container\"}>\r\n            <div onClick={() => signOut()} className=\"login_button button button_fill\"><span>Sign Out</span></div>\r\n        </div>\r\n    ) : (\r\n            <div className={className + \" login_container\"}>\r\n                <div onClick={() => signInWithGoogle()} className=\"login_button button button_fill\"><span>Sign up</span></div>\r\n                <div onClick={() => signInWithGoogle()} className=\"login_button button button_outline\"><span>Log in</span></div>\r\n            </div>\r\n        );\r\n}\r\n\r\nexport default Login;","import React from 'react';\nimport './Styles/Home.css'\nimport Login from './Components/Login'\nimport UserProvider from './Providers/UserProvider';\n\nconst App = () => {\n  \n  return (\n    <UserProvider>\n      <div className=\"App home\">\n        <header className='header'>\n          <h1 className=\"header__title\">Aplicacion!!!</h1>\n          <Login className=\"header__button\" />\n        </header>\n      </div>\n    </UserProvider>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}